## From section 4., you should have obtained a set of ATAC-seq peaks in stomach and sigmoid_colon that lie outside gene coordinates.

## Saved files from section 4
cut -f-2 analyses/bigBed.peaks.ids.txt | \
while read filename tissue; do
echo "$tissue"
bedtools intersect -a data/bed.files/"$filename".bed -b annotation/gencode.v24.protein.coding.gene.body.bed -v | \
sort -u -k1,1 -k2,2 -k3,3 > data/bed.files/ATAC_seq_peaks_outside_genes_"$tissue".bed
done




## We will use these peaks as a starting point to build a catalogue of distal regulatory regions.
## Task 1: Create a folder regulatory_elements inside epigenomics_uvic. This will be the folder where you store all your subsequent results.

mkdir regulatory_elements 
mkdir regulatory_elements/analyses

## Task 2: Distal regulatory regions are usually found to be flanked by both H3K27ac and H3K4me1. 
## From your starting catalogue of open regions in each tissue, select those that overlap peaks of H3K27ac AND H3K4me1 in the corresponding tissue. 
## You will get a list of candidate distal regulatory elements for each tissue. How many are they?

## Search and download files
for mod in H3K27ac H3K4me1 
do
echo $mod
grep -F $mod ../ChIP-seq/metadata.tsv |\
grep -F "bigBed_narrowPeak" |\
grep -F "pseudoreplicated_peaks"  |\
grep -F "GRCh38" |\
awk 'BEGIN{FS=OFS="\t"}{print $1, $11}'| \
sort -k2,2 -k1,1r |\
sort -k2,2 -u > analyses/bigBed.$mod.peaks.ids.txt
done

mkdir data
mkdir data/H3K27ac
mkdir data/H3K4me1

for mod in H3K27ac H3K4me1
do
cut -f1 analyses/bigBed.$mod.peaks.ids.txt |\
while read filename; do
echo $filename
wget -P data/$mod "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done
done

## Check md5sum
for mod in H3K27ac H3K4me1
do
echo $mod
../bin/selectRows.sh <(cut -f1 analyses/bigBed.$mod.peaks.ids.txt) ../ChIP-seq/metadata.tsv | cut -f1,46 > data/$mod/md5sum.txt
cat data/$mod/md5sum.txt |\
while read filename original_md5sum; do 
md5sum data/$mod/"$filename".bigBed |\
awk -v filename="$filename" -v original_md5sum="$original_md5sum" 'BEGIN{FS=" ";OFS="\t"}{print filename, original_md5sum, $1}' 
done > tmp 
mv tmp data/$mod/md5sum.txt
awk '$2!=$3' data/$mod/md5sum.txt
done


##Convert  into BED files
for bb in H3K27ac H3K4me1
do
echo $bb
cut -f1 analyses/bigBed.$fbb.peaks.ids.txt |\
while read filename; do
bigBedToBed data/$bb/"$filename".bigBed data/$bb/"$filename".bed
done
done

##  Overlaping peaks of in the corresponding tissues
cut -f-2 analyses/bigBed.H3K27ac.peaks.ids.txt |\
while read filename tissue; do
echo "$tissue"
bedtools intersect -a ../ATAC-seq/data/bed.files/ATAC_seq_peaks_outside_genes_"$tissue".bed -b data/H3K27ac/"$filename".bed -u > data/common_peaks_H3K27ac_"$tissue".bed
done

cut -f-2 analyses/bigBed.H3K4me1.peaks.ids.txt |\
while read filename tissue; do
echo "$tissue"
bedtools intersect -a data/common_peaks_H3K27ac_"$tissue".bed -b data/H3K4me1/"$filename".bed -u > data/common_peaks_H3K27ac_H3K4me1_"$tissue".bed
done

wc -l data/common_peaks_H3K27ac_H3K4me1_*.bed

#############################################
ANSWER: Sigmoid colon: 8627 / Stomach: 5148
#############################################

## Task 3: Focus on regulatory elements that are located on chromosome 1 
## (hint: to parse a file based on the value of a specific column, have a look at what we did here), 
## and generate a file regulatory.elements.starts.tsv that contains the name of the regulatory region (i.e. the name of the original ATAC-seq peak) 
## and the start (5') coordinate of the region.

mkdir chr1.analysis
mkdir chr1.analysis/regulatory_elements_starts

for tissue in sigmoid_colon stomach
do
echo $tissue
grep -w chr1 data/common_peaks_H3K27ac_H3K4me1_"$tissue".bed | \
awk 'BEGIN{FS=OFS="\t"}{print $4, $2}' > analyses/chr1.analysis/regulatory.elements.starts."$tissue".tsv
done

## Task 4: Focus on protein-coding genes located on chromosome 1. From the BED file of gene body coordinates that you generated here, 
## prepare a tab-separated file called gene.starts.tsv which will store the name of the gene in the first column, 
## and the start coordinate of the gene on the second column (REMEMBER: for genes located on the minus strand, the start coordinate will be at the 3'). 
## Use the command below as a starting point:

grep -w chr1 ../ChIP-seq/annotation/gencode.v24.protein.coding.gene.body.bed |\
awk 'BEGIN{FS=OFS="\t"}{if ($6=="+"){start=$2} else {start=$3}; print $4, start}' > analyses/chr1.analysis/gene.starts.tsv

## Task 5: Download or copy this python script inside the epigenomics_uvic/bin folder. 
## Have a look at the help page of this script to understand how it works:
## python ../bin/get.distance.py -h
## This script takes as input two distinct arguments: 
## 1) --input corresponds to the file gene.starts.tsv (i.e. the file you generated in Task #4); 
## 2) --start corresponds to the 5' coordinate of a regulatory element. 
## Complete the python script so that for a given coordinate --start the script returns the closest gene, the start of the gene and the distance of the regulatory element.

#!/usr/bin/env python


#************
# LIBRARIES *
#************

import sys
from optparse import OptionParser


#*****************
# OPTION PARSING *
#*****************

parser = OptionParser()
parser.add_option("-i", "--input", dest="input")
parser.add_option("-s", "--start", dest="start")
options, args = parser.parse_args()

open_input = open(options.input)
enhancer_start = int(options.start)


#********
# BEGIN *
#********

x=1000000 # set maximum distance to 1 Mb
selectedGene="" # initialize the gene as empty
selectedGeneStart=0 # initialize the start coordinate of the gene as empty

for line in open_input.readlines(): # for each line in the input file
	gene, POSITION = line.strip().split('\t') # split the line into two columns based on a tab 
	# define a variable called position that correspond to the integer of the start of the gene
    position = int (position)
	# compute the absolute value of the difference between position and enhancer_start
    distance = abs(position - enhancer_start) 

	# if this absolute value is lower than x
    if distance < x
		# this value will now be your current x
        x = distance
		# save gene as selectedGene
        selectedGene = gene
		# save position as selectedGeneStart
        selectedGeneStart = position

print "\t".join([selectedGene, str(selectedGeneStart), str(x)])


## Task 6. For each regulatory element contained in the file regulatory.elements.starts.tsv, 
## retrieve the closest gene and the distance to the closest gene using the python script you created above. 
## Use the command below as a starting point:

cat regulatory.elements.starts.tsv | while read element start; do 
   python ../bin/get.distance.py --input analyses/chr1.analysis/gene.starts.tsv --start $start; 
done > regulatoryElements.genes.distances.tsv


## Task 7: Use R to compute the mean and the median of the distances stored in regulatoryElements.genes.distances.tsv.

## Sigmoid colon
data <- read.table("regulatoryElements.genes.distances.sigmoid_colon.tsv", header=FALSE, sep="\t")
mean(data$V3, na.rm = TRUE)
median(data$V3, na.rm = TRUE)

###################################################################
###  ANSWER: Sigmoid_colon: mean: 73067.4 / median: 36045    ##### 
###################################################################


## Stomach
data <- read.table("regulatoryElements.genes.distances.stomach.tsv", header=FALSE, sep="\t")
mean(data$V3, na.rm = TRUE)
median(data$V3, na.rm = TRUE)

###################################################################
###  ANSWER: Mean distance: 47013.77 / Median distance: 27773.5 ###
###################################################################
